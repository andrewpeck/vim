snippet sigv "VHDL Signal Vector"
signal ${1:name} : std_logic_vector (${2:num} downto 0);
endsnippet

snippet sig "VHDL Signal"
signal ${1:name} : std_logic;
endsnippet

snippet out "VHDL Output"
${1:name} : out std_logic;
endsnippet

snippet in "VHDL Input"
${1:name} : in std_logic;
endsnippet

snippet outv "VHDL Output Vector"
${1:name} : out std_logic_vector (${2:num} downto 0);
endsnippet

snippet inv "VHDL Output Vector"
${1:name} : in std_logic_vector (${2:num} downto 0);
endsnippet

snippet process "VHDL Process"
process (${1:clock}) begin
    if (rising_edge($1)) then

    end if;
end process;
endsnippet

snippet entity
${1:module}_inst : entity work.$1
generic map (

);
port map (

);
endsnippet

snippet module
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;

library unisim;
use unisim.vcomponents.all;

entity ${1:module} is
generic (
   g_NAME : integer := X
);
port(
);
end $1;

architecture Behavioral of $1 is

begin


end Behavioral;
endsnippet

snippet description
----------------------------------------------------------------------------------
-- ${1:CMS Muon Endcap}
-- ${2:GEM Collaboration}
-- ${3:Project} -- ${4:Description}
-- ${4:A. Peck}
----------------------------------------------------------------------------------
-- Description:
--   $5
----------------------------------------------------------------------------------
-- `date +%Y/%m/%d` --
----------------------------------------------------------------------------------
endsnippet

snippet today
`date +%Y/%m/%d`
endsnippet

snippet KEEP
attribute KEEP : string;
attribute KEEP of $1 : signal is "TRUE";
endsnippet
snippet IOB
attribute IOB : string;
attribute IOB of $1 : signal is "TRUE";
endsnippet
snippet DEBUG
attribute DEBUG : string;
attribute DEBUG of $1 : signal is "TRUE";
endsnippet
snippet SAVE
attribute SAVE : string;
attribute SAVE of $1 : signal is "TRUE";
endsnippet

snippet others "VHDL Others"
(others => '0');
endsnippet

snippet generate "VHDL Generate"
${1:tag} : IF (${2:condition}) GENERATE

END GENERATE $1;
endsnippet

snippet for "VHDL For Loop"
${1:tag} : for I in 0 to (${2:max}) generate
begin
end generate;
endsnippet

snippet if "VHDL if"
if    (${1} = ) then
end if;
endsnippet

snippet ifel "VHDL if else"
if    (reset = '1') then
elsif () then
else
end if;
endsnippet

snippet comment "VHDL Comment"
--------------------------------------------------------------------------------
-- ${1}
--------------------------------------------------------------------------------
endsnippet

snippet case "VHDL Comment"
case ${1} is
	when ${2} =>
	when others =>
end case;
endsnippet

snippet counter
process (clock_i)
variable counter : integer range 0 to 8;
begin
if (rising_edge(clock_i)) then

	if clock_en_i = '1' then
		counter := 1;
		clk_en80 <= '0';
	else
		counter := counter + 1;

		if counter = 8 then
			counter := 0;
		end if;

		clk_en80   <= '0';
		if counter = 0 or counter = 4 then
			clk_en80   <= '1';
		end if;
	end if;

end if;
end process;
endsnippet

snippet clocks
--------------------------------------------------------------------------------
-- clocks
--------------------------------------------------------------------------------
clock <= not clock after 1.5625 ns;

process (clock) begin
if (rising_edge(clock)) then
    clock160 <= not clock160;
end if;
end process;

process (clock160) begin
if (rising_edge(clock160)) then
    clock80 <= not clock80;
end if;
end process;

process (clock80) begin
if (rising_edge(clock80)) then
    clock40 <= not clock40;
end if;
end process;
endsnippet

snippet
i_${1:module} : entity work.$1
port map(
    a => a,
    b => b
);
endsnippet
